/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      TwitterUser: TwitterUserObject
      Tweet: TweetObject
      TwitterUserConnection: TwitterUserConnectionObject
      PageInfo: PageInfoObject
      TwitterUserEdge: TwitterUserEdgeObject
      AggregateTwitterUser: AggregateTwitterUserObject
      TweetConnection: TweetConnectionObject
      TweetEdge: TweetEdgeObject
      AggregateTweet: AggregateTweetObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      TwitterUserSubscriptionPayload: TwitterUserSubscriptionPayloadObject
      TwitterUserPreviousValues: TwitterUserPreviousValuesObject
      TweetSubscriptionPayload: TweetSubscriptionPayloadObject
      TweetPreviousValues: TweetPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      TwitterUser: TwitterUserFieldDetails
      Tweet: TweetFieldDetails
      TwitterUserConnection: TwitterUserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      TwitterUserEdge: TwitterUserEdgeFieldDetails
      AggregateTwitterUser: AggregateTwitterUserFieldDetails
      TweetConnection: TweetConnectionFieldDetails
      TweetEdge: TweetEdgeFieldDetails
      AggregateTweet: AggregateTweetFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      TwitterUserSubscriptionPayload: TwitterUserSubscriptionPayloadFieldDetails
      TwitterUserPreviousValues: TwitterUserPreviousValuesFieldDetails
      TweetSubscriptionPayload: TweetSubscriptionPayloadFieldDetails
      TweetPreviousValues: TweetPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      TwitterUserWhereUniqueInput: TwitterUserWhereUniqueInputInputObject
      TweetWhereInput: TweetWhereInputInputObject
      TwitterUserWhereInput: TwitterUserWhereInputInputObject
      TweetWhereUniqueInput: TweetWhereUniqueInputInputObject
      TwitterUserCreateInput: TwitterUserCreateInputInputObject
      TweetCreateManyWithoutHandleInput: TweetCreateManyWithoutHandleInputInputObject
      TweetCreateWithoutHandleInput: TweetCreateWithoutHandleInputInputObject
      TwitterUserUpdateInput: TwitterUserUpdateInputInputObject
      TweetUpdateManyWithoutHandleInput: TweetUpdateManyWithoutHandleInputInputObject
      TweetUpdateWithWhereUniqueWithoutHandleInput: TweetUpdateWithWhereUniqueWithoutHandleInputInputObject
      TweetUpdateWithoutHandleDataInput: TweetUpdateWithoutHandleDataInputInputObject
      TweetUpsertWithWhereUniqueWithoutHandleInput: TweetUpsertWithWhereUniqueWithoutHandleInputInputObject
      TweetScalarWhereInput: TweetScalarWhereInputInputObject
      TweetUpdateManyWithWhereNestedInput: TweetUpdateManyWithWhereNestedInputInputObject
      TweetUpdateManyDataInput: TweetUpdateManyDataInputInputObject
      TwitterUserUpdateManyMutationInput: TwitterUserUpdateManyMutationInputInputObject
      TweetCreateInput: TweetCreateInputInputObject
      TwitterUserCreateOneWithoutTweetsInput: TwitterUserCreateOneWithoutTweetsInputInputObject
      TwitterUserCreateWithoutTweetsInput: TwitterUserCreateWithoutTweetsInputInputObject
      TweetUpdateInput: TweetUpdateInputInputObject
      TwitterUserUpdateOneRequiredWithoutTweetsInput: TwitterUserUpdateOneRequiredWithoutTweetsInputInputObject
      TwitterUserUpdateWithoutTweetsDataInput: TwitterUserUpdateWithoutTweetsDataInputInputObject
      TwitterUserUpsertWithoutTweetsInput: TwitterUserUpsertWithoutTweetsInputInputObject
      TweetUpdateManyMutationInput: TweetUpdateManyMutationInputInputObject
      TwitterUserSubscriptionWhereInput: TwitterUserSubscriptionWhereInputInputObject
      TweetSubscriptionWhereInput: TweetSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    TweetOrderByInput: TweetOrderByInputValues,
    TwitterUserOrderByInput: TwitterUserOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'twitterUser', args?: QueryTwitterUserArgs[] | false, alias?: string  } 
  | { name: 'twitterUsers', args?: QueryTwitterUsersArgs[] | false, alias?: string  } 
  | { name: 'twitterUsersConnection', args?: QueryTwitterUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'tweet', args?: QueryTweetArgs[] | false, alias?: string  } 
  | { name: 'tweets', args?: QueryTweetsArgs[] | false, alias?: string  } 
  | { name: 'tweetsConnection', args?: QueryTweetsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'twitterUser'
  | 'twitterUsers'
  | 'twitterUsersConnection'
  | 'tweet'
  | 'tweets'
  | 'tweetsConnection'


type QueryTwitterUserArgs =
  | 'where'
type QueryTwitterUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTwitterUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTweetArgs =
  | 'where'
type QueryTweetsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTweetsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  twitterUser: {
    type: 'TwitterUser'
    args: Record<QueryTwitterUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TwitterUserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterUser | null> | prisma.TwitterUser | null
  }
  twitterUsers: {
    type: 'TwitterUser'
    args: Record<QueryTwitterUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TwitterUserWhereInput | null, orderBy?: prisma.TwitterUserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterUser[]> | prisma.TwitterUser[]
  }
  twitterUsersConnection: {
    type: 'TwitterUserConnection'
    args: Record<QueryTwitterUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TwitterUserWhereInput | null, orderBy?: prisma.TwitterUserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterUserConnection> | prisma.TwitterUserConnection
  }
  tweet: {
    type: 'Tweet'
    args: Record<QueryTweetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TweetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tweet | null> | prisma.Tweet | null
  }
  tweets: {
    type: 'Tweet'
    args: Record<QueryTweetsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TweetWhereInput | null, orderBy?: prisma.TweetOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tweet[]> | prisma.Tweet[]
  }
  tweetsConnection: {
    type: 'TweetConnection'
    args: Record<QueryTweetsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TweetWhereInput | null, orderBy?: prisma.TweetOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TweetConnection> | prisma.TweetConnection
  }
}
  

// Types for TwitterUser

type TwitterUserObject =
  | TwitterUserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'handle', args?: [] | false, alias?: string  } 
  | { name: 'tweets', args?: TwitterUserTweetsArgs[] | false, alias?: string  } 
  | { name: 'statuses_count', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type TwitterUserFields =
  | 'id'
  | 'handle'
  | 'tweets'
  | 'statuses_count'
  | 'name'


type TwitterUserTweetsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface TwitterUserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  handle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tweets: {
    type: 'Tweet'
    args: Record<TwitterUserTweetsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TwitterUser">,
      args: { where?: TweetWhereInput | null, orderBy?: prisma.TweetOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tweet[]> | prisma.Tweet[]
  }
  statuses_count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Tweet

type TweetObject =
  | TweetFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'twitterId', args?: [] | false, alias?: string  } 
  | { name: 'twitterIdString', args?: [] | false, alias?: string  } 
  | { name: 'handle', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 

type TweetFields =
  | 'id'
  | 'twitterId'
  | 'twitterIdString'
  | 'handle'
  | 'text'



  

export interface TweetFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  twitterId: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  twitterIdString: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  handle: {
    type: 'TwitterUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Tweet">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterUser> | prisma.TwitterUser
  }
  text: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TwitterUserConnection

type TwitterUserConnectionObject =
  | TwitterUserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TwitterUserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TwitterUserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TwitterUserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TwitterUserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TwitterUserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterUserEdge[]> | prisma.TwitterUserEdge[]
  }
  aggregate: {
    type: 'AggregateTwitterUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TwitterUserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTwitterUser> | prisma.AggregateTwitterUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for TwitterUserEdge

type TwitterUserEdgeObject =
  | TwitterUserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TwitterUserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TwitterUserEdgeFieldDetails {
  node: {
    type: 'TwitterUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TwitterUserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterUser> | prisma.TwitterUser
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTwitterUser

type AggregateTwitterUserObject =
  | AggregateTwitterUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTwitterUserFields =
  | 'count'



  

export interface AggregateTwitterUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TweetConnection

type TweetConnectionObject =
  | TweetConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TweetConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TweetConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TweetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TweetEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TweetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TweetEdge[]> | prisma.TweetEdge[]
  }
  aggregate: {
    type: 'AggregateTweet'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TweetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTweet> | prisma.AggregateTweet
  }
}
  

// Types for TweetEdge

type TweetEdgeObject =
  | TweetEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TweetEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TweetEdgeFieldDetails {
  node: {
    type: 'Tweet'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TweetEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tweet> | prisma.Tweet
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTweet

type AggregateTweetObject =
  | AggregateTweetFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTweetFields =
  | 'count'



  

export interface AggregateTweetFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createTwitterUser', args?: MutationCreateTwitterUserArgs[] | false, alias?: string  } 
  | { name: 'updateTwitterUser', args?: MutationUpdateTwitterUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyTwitterUsers', args?: MutationUpdateManyTwitterUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertTwitterUser', args?: MutationUpsertTwitterUserArgs[] | false, alias?: string  } 
  | { name: 'deleteTwitterUser', args?: MutationDeleteTwitterUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTwitterUsers', args?: MutationDeleteManyTwitterUsersArgs[] | false, alias?: string  } 
  | { name: 'createTweet', args?: MutationCreateTweetArgs[] | false, alias?: string  } 
  | { name: 'updateTweet', args?: MutationUpdateTweetArgs[] | false, alias?: string  } 
  | { name: 'updateManyTweets', args?: MutationUpdateManyTweetsArgs[] | false, alias?: string  } 
  | { name: 'upsertTweet', args?: MutationUpsertTweetArgs[] | false, alias?: string  } 
  | { name: 'deleteTweet', args?: MutationDeleteTweetArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTweets', args?: MutationDeleteManyTweetsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createTwitterUser'
  | 'updateTwitterUser'
  | 'updateManyTwitterUsers'
  | 'upsertTwitterUser'
  | 'deleteTwitterUser'
  | 'deleteManyTwitterUsers'
  | 'createTweet'
  | 'updateTweet'
  | 'updateManyTweets'
  | 'upsertTweet'
  | 'deleteTweet'
  | 'deleteManyTweets'


type MutationCreateTwitterUserArgs =
  | 'data'
type MutationUpdateTwitterUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTwitterUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertTwitterUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTwitterUserArgs =
  | 'where'
type MutationDeleteManyTwitterUsersArgs =
  | 'where'
type MutationCreateTweetArgs =
  | 'data'
type MutationUpdateTweetArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTweetsArgs =
  | 'data'
  | 'where'
type MutationUpsertTweetArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTweetArgs =
  | 'where'
type MutationDeleteManyTweetsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createTwitterUser: {
    type: 'TwitterUser'
    args: Record<MutationCreateTwitterUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TwitterUserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterUser> | prisma.TwitterUser
  }
  updateTwitterUser: {
    type: 'TwitterUser'
    args: Record<MutationUpdateTwitterUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TwitterUserUpdateInput, where: TwitterUserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterUser | null> | prisma.TwitterUser | null
  }
  updateManyTwitterUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTwitterUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TwitterUserUpdateManyMutationInput, where?: TwitterUserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTwitterUser: {
    type: 'TwitterUser'
    args: Record<MutationUpsertTwitterUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TwitterUserWhereUniqueInput, create: TwitterUserCreateInput, update: TwitterUserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterUser> | prisma.TwitterUser
  }
  deleteTwitterUser: {
    type: 'TwitterUser'
    args: Record<MutationDeleteTwitterUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TwitterUserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterUser | null> | prisma.TwitterUser | null
  }
  deleteManyTwitterUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTwitterUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TwitterUserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTweet: {
    type: 'Tweet'
    args: Record<MutationCreateTweetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TweetCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tweet> | prisma.Tweet
  }
  updateTweet: {
    type: 'Tweet'
    args: Record<MutationUpdateTweetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TweetUpdateInput, where: TweetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tweet | null> | prisma.Tweet | null
  }
  updateManyTweets: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTweetsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TweetUpdateManyMutationInput, where?: TweetWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTweet: {
    type: 'Tweet'
    args: Record<MutationUpsertTweetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TweetWhereUniqueInput, create: TweetCreateInput, update: TweetUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tweet> | prisma.Tweet
  }
  deleteTweet: {
    type: 'Tweet'
    args: Record<MutationDeleteTweetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TweetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tweet | null> | prisma.Tweet | null
  }
  deleteManyTweets: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTweetsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TweetWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'twitterUser', args?: SubscriptionTwitterUserArgs[] | false, alias?: string  } 
  | { name: 'tweet', args?: SubscriptionTweetArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'twitterUser'
  | 'tweet'


type SubscriptionTwitterUserArgs =
  | 'where'
type SubscriptionTweetArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  twitterUser: {
    type: 'TwitterUserSubscriptionPayload'
    args: Record<SubscriptionTwitterUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TwitterUserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterUserSubscriptionPayload | null> | prisma.TwitterUserSubscriptionPayload | null
  }
  tweet: {
    type: 'TweetSubscriptionPayload'
    args: Record<SubscriptionTweetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TweetSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TweetSubscriptionPayload | null> | prisma.TweetSubscriptionPayload | null
  }
}
  

// Types for TwitterUserSubscriptionPayload

type TwitterUserSubscriptionPayloadObject =
  | TwitterUserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TwitterUserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TwitterUserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TwitterUserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'TwitterUser'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TwitterUserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterUser | null> | prisma.TwitterUser | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TwitterUserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TwitterUserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterUserPreviousValues | null> | prisma.TwitterUserPreviousValues | null
  }
}
  

// Types for TwitterUserPreviousValues

type TwitterUserPreviousValuesObject =
  | TwitterUserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'handle', args?: [] | false, alias?: string  } 
  | { name: 'statuses_count', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type TwitterUserPreviousValuesFields =
  | 'id'
  | 'handle'
  | 'statuses_count'
  | 'name'



  

export interface TwitterUserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  handle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  statuses_count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for TweetSubscriptionPayload

type TweetSubscriptionPayloadObject =
  | TweetSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TweetSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TweetSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TweetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Tweet'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TweetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tweet | null> | prisma.Tweet | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TweetPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TweetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TweetPreviousValues | null> | prisma.TweetPreviousValues | null
  }
}
  

// Types for TweetPreviousValues

type TweetPreviousValuesObject =
  | TweetPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'twitterId', args?: [] | false, alias?: string  } 
  | { name: 'twitterIdString', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 

type TweetPreviousValuesFields =
  | 'id'
  | 'twitterId'
  | 'twitterIdString'
  | 'text'



  

export interface TweetPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  twitterId: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  twitterIdString: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  text: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface TwitterUserWhereUniqueInput {
  id?: string | null
  handle?: string | null
}
export type TwitterUserWhereUniqueInputInputObject =
  | Extract<keyof TwitterUserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  
export interface TweetWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  twitterId?: number | null
  twitterId_not?: number | null
  twitterId_in?: number[]
  twitterId_not_in?: number[]
  twitterId_lt?: number | null
  twitterId_lte?: number | null
  twitterId_gt?: number | null
  twitterId_gte?: number | null
  twitterIdString?: string | null
  twitterIdString_not?: string | null
  twitterIdString_in?: string[]
  twitterIdString_not_in?: string[]
  twitterIdString_lt?: string | null
  twitterIdString_lte?: string | null
  twitterIdString_gt?: string | null
  twitterIdString_gte?: string | null
  twitterIdString_contains?: string | null
  twitterIdString_not_contains?: string | null
  twitterIdString_starts_with?: string | null
  twitterIdString_not_starts_with?: string | null
  twitterIdString_ends_with?: string | null
  twitterIdString_not_ends_with?: string | null
  handle?: TwitterUserWhereInput | null
  text?: string | null
  text_not?: string | null
  text_in?: string[]
  text_not_in?: string[]
  text_lt?: string | null
  text_lte?: string | null
  text_gt?: string | null
  text_gte?: string | null
  text_contains?: string | null
  text_not_contains?: string | null
  text_starts_with?: string | null
  text_not_starts_with?: string | null
  text_ends_with?: string | null
  text_not_ends_with?: string | null
  AND?: TweetWhereInput[]
  OR?: TweetWhereInput[]
  NOT?: TweetWhereInput[]
}
export type TweetWhereInputInputObject =
  | Extract<keyof TweetWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'twitterId', alias?: string  } 
  | { name: 'twitterId_not', alias?: string  } 
  | { name: 'twitterId_in', alias?: string  } 
  | { name: 'twitterId_not_in', alias?: string  } 
  | { name: 'twitterId_lt', alias?: string  } 
  | { name: 'twitterId_lte', alias?: string  } 
  | { name: 'twitterId_gt', alias?: string  } 
  | { name: 'twitterId_gte', alias?: string  } 
  | { name: 'twitterIdString', alias?: string  } 
  | { name: 'twitterIdString_not', alias?: string  } 
  | { name: 'twitterIdString_in', alias?: string  } 
  | { name: 'twitterIdString_not_in', alias?: string  } 
  | { name: 'twitterIdString_lt', alias?: string  } 
  | { name: 'twitterIdString_lte', alias?: string  } 
  | { name: 'twitterIdString_gt', alias?: string  } 
  | { name: 'twitterIdString_gte', alias?: string  } 
  | { name: 'twitterIdString_contains', alias?: string  } 
  | { name: 'twitterIdString_not_contains', alias?: string  } 
  | { name: 'twitterIdString_starts_with', alias?: string  } 
  | { name: 'twitterIdString_not_starts_with', alias?: string  } 
  | { name: 'twitterIdString_ends_with', alias?: string  } 
  | { name: 'twitterIdString_not_ends_with', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'text_not', alias?: string  } 
  | { name: 'text_in', alias?: string  } 
  | { name: 'text_not_in', alias?: string  } 
  | { name: 'text_lt', alias?: string  } 
  | { name: 'text_lte', alias?: string  } 
  | { name: 'text_gt', alias?: string  } 
  | { name: 'text_gte', alias?: string  } 
  | { name: 'text_contains', alias?: string  } 
  | { name: 'text_not_contains', alias?: string  } 
  | { name: 'text_starts_with', alias?: string  } 
  | { name: 'text_not_starts_with', alias?: string  } 
  | { name: 'text_ends_with', alias?: string  } 
  | { name: 'text_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TwitterUserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  handle?: string | null
  handle_not?: string | null
  handle_in?: string[]
  handle_not_in?: string[]
  handle_lt?: string | null
  handle_lte?: string | null
  handle_gt?: string | null
  handle_gte?: string | null
  handle_contains?: string | null
  handle_not_contains?: string | null
  handle_starts_with?: string | null
  handle_not_starts_with?: string | null
  handle_ends_with?: string | null
  handle_not_ends_with?: string | null
  tweets_every?: TweetWhereInput | null
  tweets_some?: TweetWhereInput | null
  tweets_none?: TweetWhereInput | null
  statuses_count?: number | null
  statuses_count_not?: number | null
  statuses_count_in?: number[]
  statuses_count_not_in?: number[]
  statuses_count_lt?: number | null
  statuses_count_lte?: number | null
  statuses_count_gt?: number | null
  statuses_count_gte?: number | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: TwitterUserWhereInput[]
  OR?: TwitterUserWhereInput[]
  NOT?: TwitterUserWhereInput[]
}
export type TwitterUserWhereInputInputObject =
  | Extract<keyof TwitterUserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'handle_not', alias?: string  } 
  | { name: 'handle_in', alias?: string  } 
  | { name: 'handle_not_in', alias?: string  } 
  | { name: 'handle_lt', alias?: string  } 
  | { name: 'handle_lte', alias?: string  } 
  | { name: 'handle_gt', alias?: string  } 
  | { name: 'handle_gte', alias?: string  } 
  | { name: 'handle_contains', alias?: string  } 
  | { name: 'handle_not_contains', alias?: string  } 
  | { name: 'handle_starts_with', alias?: string  } 
  | { name: 'handle_not_starts_with', alias?: string  } 
  | { name: 'handle_ends_with', alias?: string  } 
  | { name: 'handle_not_ends_with', alias?: string  } 
  | { name: 'tweets_every', alias?: string  } 
  | { name: 'tweets_some', alias?: string  } 
  | { name: 'tweets_none', alias?: string  } 
  | { name: 'statuses_count', alias?: string  } 
  | { name: 'statuses_count_not', alias?: string  } 
  | { name: 'statuses_count_in', alias?: string  } 
  | { name: 'statuses_count_not_in', alias?: string  } 
  | { name: 'statuses_count_lt', alias?: string  } 
  | { name: 'statuses_count_lte', alias?: string  } 
  | { name: 'statuses_count_gt', alias?: string  } 
  | { name: 'statuses_count_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TweetWhereUniqueInput {
  id?: string | null
  twitterId?: number | null
  twitterIdString?: string | null
}
export type TweetWhereUniqueInputInputObject =
  | Extract<keyof TweetWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'twitterId', alias?: string  } 
  | { name: 'twitterIdString', alias?: string  } 
  
export interface TwitterUserCreateInput {
  id?: string | null
  handle?: string
  tweets?: TweetCreateManyWithoutHandleInput | null
  statuses_count?: number | null
  name?: string | null
}
export type TwitterUserCreateInputInputObject =
  | Extract<keyof TwitterUserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'tweets', alias?: string  } 
  | { name: 'statuses_count', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface TweetCreateManyWithoutHandleInput {
  create?: TweetCreateWithoutHandleInput[]
  connect?: TweetWhereUniqueInput[]
}
export type TweetCreateManyWithoutHandleInputInputObject =
  | Extract<keyof TweetCreateManyWithoutHandleInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TweetCreateWithoutHandleInput {
  id?: string | null
  twitterId?: number
  twitterIdString?: string
  text?: string
}
export type TweetCreateWithoutHandleInputInputObject =
  | Extract<keyof TweetCreateWithoutHandleInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'twitterId', alias?: string  } 
  | { name: 'twitterIdString', alias?: string  } 
  | { name: 'text', alias?: string  } 
  
export interface TwitterUserUpdateInput {
  handle?: string | null
  tweets?: TweetUpdateManyWithoutHandleInput | null
  statuses_count?: number | null
  name?: string | null
}
export type TwitterUserUpdateInputInputObject =
  | Extract<keyof TwitterUserUpdateInput, string>
  | { name: 'handle', alias?: string  } 
  | { name: 'tweets', alias?: string  } 
  | { name: 'statuses_count', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface TweetUpdateManyWithoutHandleInput {
  create?: TweetCreateWithoutHandleInput[]
  delete?: TweetWhereUniqueInput[]
  connect?: TweetWhereUniqueInput[]
  set?: TweetWhereUniqueInput[]
  disconnect?: TweetWhereUniqueInput[]
  update?: TweetUpdateWithWhereUniqueWithoutHandleInput[]
  upsert?: TweetUpsertWithWhereUniqueWithoutHandleInput[]
  deleteMany?: TweetScalarWhereInput[]
  updateMany?: TweetUpdateManyWithWhereNestedInput[]
}
export type TweetUpdateManyWithoutHandleInputInputObject =
  | Extract<keyof TweetUpdateManyWithoutHandleInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface TweetUpdateWithWhereUniqueWithoutHandleInput {
  where?: TweetWhereUniqueInput
  data?: TweetUpdateWithoutHandleDataInput
}
export type TweetUpdateWithWhereUniqueWithoutHandleInputInputObject =
  | Extract<keyof TweetUpdateWithWhereUniqueWithoutHandleInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TweetUpdateWithoutHandleDataInput {
  twitterId?: number | null
  twitterIdString?: string | null
  text?: string | null
}
export type TweetUpdateWithoutHandleDataInputInputObject =
  | Extract<keyof TweetUpdateWithoutHandleDataInput, string>
  | { name: 'twitterId', alias?: string  } 
  | { name: 'twitterIdString', alias?: string  } 
  | { name: 'text', alias?: string  } 
  
export interface TweetUpsertWithWhereUniqueWithoutHandleInput {
  where?: TweetWhereUniqueInput
  update?: TweetUpdateWithoutHandleDataInput
  create?: TweetCreateWithoutHandleInput
}
export type TweetUpsertWithWhereUniqueWithoutHandleInputInputObject =
  | Extract<keyof TweetUpsertWithWhereUniqueWithoutHandleInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TweetScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  twitterId?: number | null
  twitterId_not?: number | null
  twitterId_in?: number[]
  twitterId_not_in?: number[]
  twitterId_lt?: number | null
  twitterId_lte?: number | null
  twitterId_gt?: number | null
  twitterId_gte?: number | null
  twitterIdString?: string | null
  twitterIdString_not?: string | null
  twitterIdString_in?: string[]
  twitterIdString_not_in?: string[]
  twitterIdString_lt?: string | null
  twitterIdString_lte?: string | null
  twitterIdString_gt?: string | null
  twitterIdString_gte?: string | null
  twitterIdString_contains?: string | null
  twitterIdString_not_contains?: string | null
  twitterIdString_starts_with?: string | null
  twitterIdString_not_starts_with?: string | null
  twitterIdString_ends_with?: string | null
  twitterIdString_not_ends_with?: string | null
  text?: string | null
  text_not?: string | null
  text_in?: string[]
  text_not_in?: string[]
  text_lt?: string | null
  text_lte?: string | null
  text_gt?: string | null
  text_gte?: string | null
  text_contains?: string | null
  text_not_contains?: string | null
  text_starts_with?: string | null
  text_not_starts_with?: string | null
  text_ends_with?: string | null
  text_not_ends_with?: string | null
  AND?: TweetScalarWhereInput[]
  OR?: TweetScalarWhereInput[]
  NOT?: TweetScalarWhereInput[]
}
export type TweetScalarWhereInputInputObject =
  | Extract<keyof TweetScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'twitterId', alias?: string  } 
  | { name: 'twitterId_not', alias?: string  } 
  | { name: 'twitterId_in', alias?: string  } 
  | { name: 'twitterId_not_in', alias?: string  } 
  | { name: 'twitterId_lt', alias?: string  } 
  | { name: 'twitterId_lte', alias?: string  } 
  | { name: 'twitterId_gt', alias?: string  } 
  | { name: 'twitterId_gte', alias?: string  } 
  | { name: 'twitterIdString', alias?: string  } 
  | { name: 'twitterIdString_not', alias?: string  } 
  | { name: 'twitterIdString_in', alias?: string  } 
  | { name: 'twitterIdString_not_in', alias?: string  } 
  | { name: 'twitterIdString_lt', alias?: string  } 
  | { name: 'twitterIdString_lte', alias?: string  } 
  | { name: 'twitterIdString_gt', alias?: string  } 
  | { name: 'twitterIdString_gte', alias?: string  } 
  | { name: 'twitterIdString_contains', alias?: string  } 
  | { name: 'twitterIdString_not_contains', alias?: string  } 
  | { name: 'twitterIdString_starts_with', alias?: string  } 
  | { name: 'twitterIdString_not_starts_with', alias?: string  } 
  | { name: 'twitterIdString_ends_with', alias?: string  } 
  | { name: 'twitterIdString_not_ends_with', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'text_not', alias?: string  } 
  | { name: 'text_in', alias?: string  } 
  | { name: 'text_not_in', alias?: string  } 
  | { name: 'text_lt', alias?: string  } 
  | { name: 'text_lte', alias?: string  } 
  | { name: 'text_gt', alias?: string  } 
  | { name: 'text_gte', alias?: string  } 
  | { name: 'text_contains', alias?: string  } 
  | { name: 'text_not_contains', alias?: string  } 
  | { name: 'text_starts_with', alias?: string  } 
  | { name: 'text_not_starts_with', alias?: string  } 
  | { name: 'text_ends_with', alias?: string  } 
  | { name: 'text_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TweetUpdateManyWithWhereNestedInput {
  where?: TweetScalarWhereInput
  data?: TweetUpdateManyDataInput
}
export type TweetUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof TweetUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TweetUpdateManyDataInput {
  twitterId?: number | null
  twitterIdString?: string | null
  text?: string | null
}
export type TweetUpdateManyDataInputInputObject =
  | Extract<keyof TweetUpdateManyDataInput, string>
  | { name: 'twitterId', alias?: string  } 
  | { name: 'twitterIdString', alias?: string  } 
  | { name: 'text', alias?: string  } 
  
export interface TwitterUserUpdateManyMutationInput {
  handle?: string | null
  statuses_count?: number | null
  name?: string | null
}
export type TwitterUserUpdateManyMutationInputInputObject =
  | Extract<keyof TwitterUserUpdateManyMutationInput, string>
  | { name: 'handle', alias?: string  } 
  | { name: 'statuses_count', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface TweetCreateInput {
  id?: string | null
  twitterId?: number
  twitterIdString?: string
  handle?: TwitterUserCreateOneWithoutTweetsInput
  text?: string
}
export type TweetCreateInputInputObject =
  | Extract<keyof TweetCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'twitterId', alias?: string  } 
  | { name: 'twitterIdString', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'text', alias?: string  } 
  
export interface TwitterUserCreateOneWithoutTweetsInput {
  create?: TwitterUserCreateWithoutTweetsInput | null
  connect?: TwitterUserWhereUniqueInput | null
}
export type TwitterUserCreateOneWithoutTweetsInputInputObject =
  | Extract<keyof TwitterUserCreateOneWithoutTweetsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TwitterUserCreateWithoutTweetsInput {
  id?: string | null
  handle?: string
  statuses_count?: number | null
  name?: string | null
}
export type TwitterUserCreateWithoutTweetsInputInputObject =
  | Extract<keyof TwitterUserCreateWithoutTweetsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'statuses_count', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface TweetUpdateInput {
  twitterId?: number | null
  twitterIdString?: string | null
  handle?: TwitterUserUpdateOneRequiredWithoutTweetsInput | null
  text?: string | null
}
export type TweetUpdateInputInputObject =
  | Extract<keyof TweetUpdateInput, string>
  | { name: 'twitterId', alias?: string  } 
  | { name: 'twitterIdString', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'text', alias?: string  } 
  
export interface TwitterUserUpdateOneRequiredWithoutTweetsInput {
  create?: TwitterUserCreateWithoutTweetsInput | null
  update?: TwitterUserUpdateWithoutTweetsDataInput | null
  upsert?: TwitterUserUpsertWithoutTweetsInput | null
  connect?: TwitterUserWhereUniqueInput | null
}
export type TwitterUserUpdateOneRequiredWithoutTweetsInputInputObject =
  | Extract<keyof TwitterUserUpdateOneRequiredWithoutTweetsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TwitterUserUpdateWithoutTweetsDataInput {
  handle?: string | null
  statuses_count?: number | null
  name?: string | null
}
export type TwitterUserUpdateWithoutTweetsDataInputInputObject =
  | Extract<keyof TwitterUserUpdateWithoutTweetsDataInput, string>
  | { name: 'handle', alias?: string  } 
  | { name: 'statuses_count', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface TwitterUserUpsertWithoutTweetsInput {
  update?: TwitterUserUpdateWithoutTweetsDataInput
  create?: TwitterUserCreateWithoutTweetsInput
}
export type TwitterUserUpsertWithoutTweetsInputInputObject =
  | Extract<keyof TwitterUserUpsertWithoutTweetsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TweetUpdateManyMutationInput {
  twitterId?: number | null
  twitterIdString?: string | null
  text?: string | null
}
export type TweetUpdateManyMutationInputInputObject =
  | Extract<keyof TweetUpdateManyMutationInput, string>
  | { name: 'twitterId', alias?: string  } 
  | { name: 'twitterIdString', alias?: string  } 
  | { name: 'text', alias?: string  } 
  
export interface TwitterUserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TwitterUserWhereInput | null
  AND?: TwitterUserSubscriptionWhereInput[]
  OR?: TwitterUserSubscriptionWhereInput[]
  NOT?: TwitterUserSubscriptionWhereInput[]
}
export type TwitterUserSubscriptionWhereInputInputObject =
  | Extract<keyof TwitterUserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TweetSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TweetWhereInput | null
  AND?: TweetSubscriptionWhereInput[]
  OR?: TweetSubscriptionWhereInput[]
  NOT?: TweetSubscriptionWhereInput[]
}
export type TweetSubscriptionWhereInputInputObject =
  | Extract<keyof TweetSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type TweetOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'twitterId_ASC'
  | 'twitterId_DESC'
  | 'twitterIdString_ASC'
  | 'twitterIdString_DESC'
  | 'text_ASC'
  | 'text_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TwitterUserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'handle_ASC'
  | 'handle_DESC'
  | 'statuses_count_ASC'
  | 'statuses_count_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  