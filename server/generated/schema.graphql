### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Domain {
  id: ID!
  name: String!
  pages(after: String, before: String, first: Int, last: Int, orderBy: PageOrderByInput, skip: Int, where: PageWhereInput): [Page!]
}

input DomainCreateOneWithoutPagesInput {
  connect: DomainWhereUniqueInput
  create: DomainCreateWithoutPagesInput
}

input DomainCreateWithoutPagesInput {
  id: ID
  name: String!
}

input DomainWhereInput {
  AND: [DomainWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  pages_some: PageWhereInput
}

input DomainWhereUniqueInput {
  id: ID
}

type Mutation {
  createPage(data: PageCreateInput!): Page!
}

type Page {
  domain: Domain
  id: ID!
  name: String!
}

input PageCreateInput {
  domain: DomainCreateOneWithoutPagesInput
  id: ID
  name: String!
}

enum PageOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input PageWhereInput {
  AND: [PageWhereInput!]
  domain: DomainWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
}

input PageWhereUniqueInput {
  id: ID
}

type Query {
  domain(where: DomainWhereUniqueInput!): Domain
  page(where: PageWhereUniqueInput!): Page
  pages(after: String, before: String, first: Int, last: Int, orderBy: PageOrderByInput, skip: Int, where: PageWhereInput): [Page!]!
}
