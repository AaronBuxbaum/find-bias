### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AggregateTweet {
  count: Int!
}

type AggregateTwitterUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createTwitterUser(handle: String!): TwitterUser!
  deleteManyTweets(where: TweetWhereInput): BatchPayload!
  deleteManyTwitterUsers(where: TwitterUserWhereInput): BatchPayload!
  updateTweets(handle: String!): Int!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  tweets(after: String, before: String, first: Int, last: Int, orderBy: TweetOrderByInput, skip: Int, where: TweetWhereInput): [Tweet!]!
  tweetsConnection(after: String, before: String, first: Int, last: Int, orderBy: TweetOrderByInput, skip: Int, where: TweetWhereInput): TweetConnection!
  twitterUser(where: TwitterUserWhereUniqueInput!): TwitterUser
  twitterUsers(after: String, before: String, first: Int, last: Int, orderBy: TwitterUserOrderByInput, skip: Int, where: TwitterUserWhereInput): [TwitterUser!]!
  twitterUsersConnection(after: String, before: String, first: Int, last: Int, orderBy: TwitterUserOrderByInput, skip: Int, where: TwitterUserWhereInput): TwitterUserConnection!
}

type Tweet {
  handle: TwitterUser!
  id: ID!
  text: String!
  twitterIdString: String!
}

type TweetConnection {
  aggregate: AggregateTweet!
  edges: [TweetEdge!]!
  pageInfo: PageInfo!
}

type TweetEdge {
  cursor: String!
  node: Tweet!
}

enum TweetOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  twitterIdString_ASC
  twitterIdString_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TweetWhereInput {
  AND: [TweetWhereInput!]
  handle: TwitterUserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [TweetWhereInput!]
  OR: [TweetWhereInput!]
  text: String
  text_contains: String
  text_ends_with: String
  text_gt: String
  text_gte: String
  text_in: [String!]
  text_lt: String
  text_lte: String
  text_not: String
  text_not_contains: String
  text_not_ends_with: String
  text_not_in: [String!]
  text_not_starts_with: String
  text_starts_with: String
  twitterIdString: String
  twitterIdString_contains: String
  twitterIdString_ends_with: String
  twitterIdString_gt: String
  twitterIdString_gte: String
  twitterIdString_in: [String!]
  twitterIdString_lt: String
  twitterIdString_lte: String
  twitterIdString_not: String
  twitterIdString_not_contains: String
  twitterIdString_not_ends_with: String
  twitterIdString_not_in: [String!]
  twitterIdString_not_starts_with: String
  twitterIdString_starts_with: String
}

type TwitterUser {
  handle: String!
  id: ID!
  name: String
  statuses_count: Int
  tweets(after: String, before: String, first: Int, last: Int, orderBy: TweetOrderByInput, skip: Int, where: TweetWhereInput): [Tweet!]
}

type TwitterUserConnection {
  aggregate: AggregateTwitterUser!
  edges: [TwitterUserEdge!]!
  pageInfo: PageInfo!
}

type TwitterUserEdge {
  cursor: String!
  node: TwitterUser!
}

enum TwitterUserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  handle_ASC
  handle_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  statuses_count_ASC
  statuses_count_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TwitterUserWhereInput {
  AND: [TwitterUserWhereInput!]
  handle: String
  handle_contains: String
  handle_ends_with: String
  handle_gt: String
  handle_gte: String
  handle_in: [String!]
  handle_lt: String
  handle_lte: String
  handle_not: String
  handle_not_contains: String
  handle_not_ends_with: String
  handle_not_in: [String!]
  handle_not_starts_with: String
  handle_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [TwitterUserWhereInput!]
  OR: [TwitterUserWhereInput!]
  statuses_count: Int
  statuses_count_gt: Int
  statuses_count_gte: Int
  statuses_count_in: [Int!]
  statuses_count_lt: Int
  statuses_count_lte: Int
  statuses_count_not: Int
  statuses_count_not_in: [Int!]
  tweets_every: TweetWhereInput
  tweets_none: TweetWhereInput
  tweets_some: TweetWhereInput
}

input TwitterUserWhereUniqueInput {
  handle: String
  id: ID
}
