// Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateDomain {
  count: Int!
}

type AggregatePage {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Domain {
  id: ID!
  name: String!
  pages(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Page!]
}

type DomainConnection {
  pageInfo: PageInfo!
  edges: [DomainEdge]!
  aggregate: AggregateDomain!
}

input DomainCreateInput {
  id: ID
  name: String!
  pages: PageCreateManyWithoutDomainInput
}

input DomainCreateOneWithoutPagesInput {
  create: DomainCreateWithoutPagesInput
  connect: DomainWhereUniqueInput
}

input DomainCreateWithoutPagesInput {
  id: ID
  name: String!
}

type DomainEdge {
  node: Domain!
  cursor: String!
}

enum DomainOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type DomainPreviousValues {
  id: ID!
  name: String!
}

type DomainSubscriptionPayload {
  mutation: MutationType!
  node: Domain
  updatedFields: [String!]
  previousValues: DomainPreviousValues
}

input DomainSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DomainWhereInput
  AND: [DomainSubscriptionWhereInput!]
}

input DomainUpdateInput {
  name: String
  pages: PageUpdateManyWithoutDomainInput
}

input DomainUpdateManyMutationInput {
  name: String
}

input DomainUpdateOneWithoutPagesInput {
  create: DomainCreateWithoutPagesInput
  update: DomainUpdateWithoutPagesDataInput
  upsert: DomainUpsertWithoutPagesInput
  delete: Boolean
  disconnect: Boolean
  connect: DomainWhereUniqueInput
}

input DomainUpdateWithoutPagesDataInput {
  name: String
}

input DomainUpsertWithoutPagesInput {
  update: DomainUpdateWithoutPagesDataInput!
  create: DomainCreateWithoutPagesInput!
}

input DomainWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  pages_some: PageWhereInput
  AND: [DomainWhereInput!]
}

input DomainWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createDomain(data: DomainCreateInput!): Domain!
  updateDomain(data: DomainUpdateInput!, where: DomainWhereUniqueInput!): Domain
  updateManyDomains(data: DomainUpdateManyMutationInput!, where: DomainWhereInput): BatchPayload!
  upsertDomain(where: DomainWhereUniqueInput!, create: DomainCreateInput!, update: DomainUpdateInput!): Domain!
  deleteDomain(where: DomainWhereUniqueInput!): Domain
  deleteManyDomains(where: DomainWhereInput): BatchPayload!
  createPage(data: PageCreateInput!): Page!
  updatePage(data: PageUpdateInput!, where: PageWhereUniqueInput!): Page
  updateManyPages(data: PageUpdateManyMutationInput!, where: PageWhereInput): BatchPayload!
  upsertPage(where: PageWhereUniqueInput!, create: PageCreateInput!, update: PageUpdateInput!): Page!
  deletePage(where: PageWhereUniqueInput!): Page
  deleteManyPages(where: PageWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Page {
  id: ID!
  name: String!
  domain: Domain
}

type PageConnection {
  pageInfo: PageInfo!
  edges: [PageEdge]!
  aggregate: AggregatePage!
}

input PageCreateInput {
  id: ID
  name: String!
  domain: DomainCreateOneWithoutPagesInput
}

input PageCreateManyWithoutDomainInput {
  create: [PageCreateWithoutDomainInput!]
  connect: [PageWhereUniqueInput!]
}

input PageCreateWithoutDomainInput {
  id: ID
  name: String!
}

type PageEdge {
  node: Page!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum PageOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type PagePreviousValues {
  id: ID!
  name: String!
}

input PageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [PageScalarWhereInput!]
  OR: [PageScalarWhereInput!]
  NOT: [PageScalarWhereInput!]
}

type PageSubscriptionPayload {
  mutation: MutationType!
  node: Page
  updatedFields: [String!]
  previousValues: PagePreviousValues
}

input PageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PageWhereInput
  AND: [PageSubscriptionWhereInput!]
}

input PageUpdateInput {
  name: String
  domain: DomainUpdateOneWithoutPagesInput
}

input PageUpdateManyDataInput {
  name: String
}

input PageUpdateManyMutationInput {
  name: String
}

input PageUpdateManyWithoutDomainInput {
  create: [PageCreateWithoutDomainInput!]
  delete: [PageWhereUniqueInput!]
  connect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  disconnect: [PageWhereUniqueInput!]
  update: [PageUpdateWithWhereUniqueWithoutDomainInput!]
  upsert: [PageUpsertWithWhereUniqueWithoutDomainInput!]
  deleteMany: [PageScalarWhereInput!]
  updateMany: [PageUpdateManyWithWhereNestedInput!]
}

input PageUpdateManyWithWhereNestedInput {
  where: PageScalarWhereInput!
  data: PageUpdateManyDataInput!
}

input PageUpdateWithoutDomainDataInput {
  name: String
}

input PageUpdateWithWhereUniqueWithoutDomainInput {
  where: PageWhereUniqueInput!
  data: PageUpdateWithoutDomainDataInput!
}

input PageUpsertWithWhereUniqueWithoutDomainInput {
  where: PageWhereUniqueInput!
  update: PageUpdateWithoutDomainDataInput!
  create: PageCreateWithoutDomainInput!
}

input PageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  domain: DomainWhereInput
  AND: [PageWhereInput!]
}

input PageWhereUniqueInput {
  id: ID
}

type Query {
  domain(where: DomainWhereUniqueInput!): Domain
  domains(where: DomainWhereInput, orderBy: DomainOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Domain]!
  domainsConnection(where: DomainWhereInput, orderBy: DomainOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DomainConnection!
  page(where: PageWhereUniqueInput!): Page
  pages(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Page]!
  pagesConnection(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PageConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  domain(where: DomainSubscriptionWhereInput): DomainSubscriptionPayload
  page(where: PageSubscriptionWhereInput): PageSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  email: String
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  name: String
}

input UserUpdateManyMutationInput {
  email: String
  name: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`