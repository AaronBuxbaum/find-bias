// Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateTweet {
  count: Int!
}

type AggregateTwitterUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createTweet(data: TweetCreateInput!): Tweet!
  updateTweet(data: TweetUpdateInput!, where: TweetWhereUniqueInput!): Tweet
  updateManyTweets(data: TweetUpdateManyMutationInput!, where: TweetWhereInput): BatchPayload!
  upsertTweet(where: TweetWhereUniqueInput!, create: TweetCreateInput!, update: TweetUpdateInput!): Tweet!
  deleteTweet(where: TweetWhereUniqueInput!): Tweet
  deleteManyTweets(where: TweetWhereInput): BatchPayload!
  createTwitterUser(data: TwitterUserCreateInput!): TwitterUser!
  updateTwitterUser(data: TwitterUserUpdateInput!, where: TwitterUserWhereUniqueInput!): TwitterUser
  updateManyTwitterUsers(data: TwitterUserUpdateManyMutationInput!, where: TwitterUserWhereInput): BatchPayload!
  upsertTwitterUser(where: TwitterUserWhereUniqueInput!, create: TwitterUserCreateInput!, update: TwitterUserUpdateInput!): TwitterUser!
  deleteTwitterUser(where: TwitterUserWhereUniqueInput!): TwitterUser
  deleteManyTwitterUsers(where: TwitterUserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  tweet(where: TweetWhereUniqueInput!): Tweet
  tweets(where: TweetWhereInput, orderBy: TweetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tweet]!
  tweetsConnection(where: TweetWhereInput, orderBy: TweetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TweetConnection!
  twitterUser(where: TwitterUserWhereUniqueInput!): TwitterUser
  twitterUsers(where: TwitterUserWhereInput, orderBy: TwitterUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TwitterUser]!
  twitterUsersConnection(where: TwitterUserWhereInput, orderBy: TwitterUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TwitterUserConnection!
  node(id: ID!): Node
}

type Subscription {
  tweet(where: TweetSubscriptionWhereInput): TweetSubscriptionPayload
  twitterUser(where: TwitterUserSubscriptionWhereInput): TwitterUserSubscriptionPayload
}

type Tweet {
  id: ID!
  twitterId: String!
  handle: TwitterUser!
  text: String!
}

type TweetConnection {
  pageInfo: PageInfo!
  edges: [TweetEdge]!
  aggregate: AggregateTweet!
}

input TweetCreateInput {
  id: ID
  twitterId: String!
  handle: TwitterUserCreateOneWithoutTweetsInput!
  text: String!
}

input TweetCreateManyWithoutHandleInput {
  create: [TweetCreateWithoutHandleInput!]
  connect: [TweetWhereUniqueInput!]
}

input TweetCreateWithoutHandleInput {
  id: ID
  twitterId: String!
  text: String!
}

type TweetEdge {
  node: Tweet!
  cursor: String!
}

enum TweetOrderByInput {
  id_ASC
  id_DESC
  twitterId_ASC
  twitterId_DESC
  text_ASC
  text_DESC
}

type TweetPreviousValues {
  id: ID!
  twitterId: String!
  text: String!
}

input TweetScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  twitterId: String
  twitterId_not: String
  twitterId_in: [String!]
  twitterId_not_in: [String!]
  twitterId_lt: String
  twitterId_lte: String
  twitterId_gt: String
  twitterId_gte: String
  twitterId_contains: String
  twitterId_not_contains: String
  twitterId_starts_with: String
  twitterId_not_starts_with: String
  twitterId_ends_with: String
  twitterId_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  AND: [TweetScalarWhereInput!]
  OR: [TweetScalarWhereInput!]
  NOT: [TweetScalarWhereInput!]
}

type TweetSubscriptionPayload {
  mutation: MutationType!
  node: Tweet
  updatedFields: [String!]
  previousValues: TweetPreviousValues
}

input TweetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TweetWhereInput
  AND: [TweetSubscriptionWhereInput!]
}

input TweetUpdateInput {
  twitterId: String
  handle: TwitterUserUpdateOneRequiredWithoutTweetsInput
  text: String
}

input TweetUpdateManyDataInput {
  twitterId: String
  text: String
}

input TweetUpdateManyMutationInput {
  twitterId: String
  text: String
}

input TweetUpdateManyWithoutHandleInput {
  create: [TweetCreateWithoutHandleInput!]
  delete: [TweetWhereUniqueInput!]
  connect: [TweetWhereUniqueInput!]
  set: [TweetWhereUniqueInput!]
  disconnect: [TweetWhereUniqueInput!]
  update: [TweetUpdateWithWhereUniqueWithoutHandleInput!]
  upsert: [TweetUpsertWithWhereUniqueWithoutHandleInput!]
  deleteMany: [TweetScalarWhereInput!]
  updateMany: [TweetUpdateManyWithWhereNestedInput!]
}

input TweetUpdateManyWithWhereNestedInput {
  where: TweetScalarWhereInput!
  data: TweetUpdateManyDataInput!
}

input TweetUpdateWithoutHandleDataInput {
  twitterId: String
  text: String
}

input TweetUpdateWithWhereUniqueWithoutHandleInput {
  where: TweetWhereUniqueInput!
  data: TweetUpdateWithoutHandleDataInput!
}

input TweetUpsertWithWhereUniqueWithoutHandleInput {
  where: TweetWhereUniqueInput!
  update: TweetUpdateWithoutHandleDataInput!
  create: TweetCreateWithoutHandleInput!
}

input TweetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  twitterId: String
  twitterId_not: String
  twitterId_in: [String!]
  twitterId_not_in: [String!]
  twitterId_lt: String
  twitterId_lte: String
  twitterId_gt: String
  twitterId_gte: String
  twitterId_contains: String
  twitterId_not_contains: String
  twitterId_starts_with: String
  twitterId_not_starts_with: String
  twitterId_ends_with: String
  twitterId_not_ends_with: String
  handle: TwitterUserWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  AND: [TweetWhereInput!]
}

input TweetWhereUniqueInput {
  id: ID
  twitterId: String
}

type TwitterUser {
  id: ID!
  handle: String!
  tweets(where: TweetWhereInput, orderBy: TweetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tweet!]
  statuses_count: Int
  name: String
}

type TwitterUserConnection {
  pageInfo: PageInfo!
  edges: [TwitterUserEdge]!
  aggregate: AggregateTwitterUser!
}

input TwitterUserCreateInput {
  id: ID
  handle: String!
  tweets: TweetCreateManyWithoutHandleInput
  statuses_count: Int
  name: String
}

input TwitterUserCreateOneWithoutTweetsInput {
  create: TwitterUserCreateWithoutTweetsInput
  connect: TwitterUserWhereUniqueInput
}

input TwitterUserCreateWithoutTweetsInput {
  id: ID
  handle: String!
  statuses_count: Int
  name: String
}

type TwitterUserEdge {
  node: TwitterUser!
  cursor: String!
}

enum TwitterUserOrderByInput {
  id_ASC
  id_DESC
  handle_ASC
  handle_DESC
  statuses_count_ASC
  statuses_count_DESC
  name_ASC
  name_DESC
}

type TwitterUserPreviousValues {
  id: ID!
  handle: String!
  statuses_count: Int
  name: String
}

type TwitterUserSubscriptionPayload {
  mutation: MutationType!
  node: TwitterUser
  updatedFields: [String!]
  previousValues: TwitterUserPreviousValues
}

input TwitterUserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TwitterUserWhereInput
  AND: [TwitterUserSubscriptionWhereInput!]
}

input TwitterUserUpdateInput {
  handle: String
  tweets: TweetUpdateManyWithoutHandleInput
  statuses_count: Int
  name: String
}

input TwitterUserUpdateManyMutationInput {
  handle: String
  statuses_count: Int
  name: String
}

input TwitterUserUpdateOneRequiredWithoutTweetsInput {
  create: TwitterUserCreateWithoutTweetsInput
  update: TwitterUserUpdateWithoutTweetsDataInput
  upsert: TwitterUserUpsertWithoutTweetsInput
  connect: TwitterUserWhereUniqueInput
}

input TwitterUserUpdateWithoutTweetsDataInput {
  handle: String
  statuses_count: Int
  name: String
}

input TwitterUserUpsertWithoutTweetsInput {
  update: TwitterUserUpdateWithoutTweetsDataInput!
  create: TwitterUserCreateWithoutTweetsInput!
}

input TwitterUserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  handle: String
  handle_not: String
  handle_in: [String!]
  handle_not_in: [String!]
  handle_lt: String
  handle_lte: String
  handle_gt: String
  handle_gte: String
  handle_contains: String
  handle_not_contains: String
  handle_starts_with: String
  handle_not_starts_with: String
  handle_ends_with: String
  handle_not_ends_with: String
  tweets_some: TweetWhereInput
  statuses_count: Int
  statuses_count_not: Int
  statuses_count_in: [Int!]
  statuses_count_not_in: [Int!]
  statuses_count_lt: Int
  statuses_count_lte: Int
  statuses_count_gt: Int
  statuses_count_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [TwitterUserWhereInput!]
}

input TwitterUserWhereUniqueInput {
  id: ID
  handle: String
}
`